name: Deploy Frontend to EKS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.ASSUME_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt install unzip -y 
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin

    - name: Setup EKS Access
      run: |
        echo "Using Role: ${{ secrets.ASSUME_ROLE }}"
        
        eksctl create iamidentitymapping \
          --cluster ${{ secrets.EKS_CLUSTER }} \
          --region ${{ secrets.AWS_REGION }} \
          --arn ${{ secrets.ASSUME_ROLE }} \
          --group system:masters \
          --username github-actions || echo "Identity mapping exists"
        
        # Wait for identity mapping to propagate
        sleep 30
        
        # Remove and recreate kubeconfig
        rm -f ~/.kube/config
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER }} --region ${{ secrets.AWS_REGION }}
        
        # Verify current identity
        aws sts get-caller-identity
        
        # Test kubectl access with retries
        for i in {1..10}; do
          if kubectl get nodes; then
            echo "Successfully authenticated"
            break
          else
            echo "Attempt $i failed, waiting 10 seconds..."
            sleep 10
          fi
        done

    - name: Deploy with Helm
      run: |
        kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
        helm upgrade --install frontend-release ./frontend/helm/frontend-chart --namespace dev
        helm upgrade --install backend-release ./backend/helm/backend-chart --namespace dev

#helm upgrade --install frontend-release helm/frontend-chart --namespace dev --create-namespace


#=======================================================

#name: Deploy Frontend to EKS
#
#on:
  #push:
    #branches:
      #- main  # Adjust based on your branch strategy
#
#permissions:
  #id-token: write
  #contents: read
#
#jobs:
  #deploy:
    #runs-on: ubuntu-latest
    #steps:
#
    #- name: Configure AWS Credentials
      #uses: aws-actions/configure-aws-credentials@v2
      #with:
        #role-to-assume: arn:aws:iam::YOUR_AWS_ACCOUNT_ID:role/YOUR_OIDC_ROLE
        #aws-region: YOUR_AWS_REGION
#
    #- name: Checkout Code
      #uses: actions/checkout@v4
#
    #- name: Install Dependencies
      #run: |
        #sudo apt-get update
        #sudo apt-get install -y awscli
        #curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        #curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        #chmod +x kubectl
        #sudo mv kubectl /usr/local/bin/
#
    #- name: Authenticate with EKS Cluster
      #run: |
        #aws eks update-kubeconfig --name YOUR_EKS_CLUSTER_NAME --region YOUR_AWS_REGION
#
    #- name: Login to Container Registry
      #run: |
        #echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
#
    #- name: Build and Push Image
      #run: |
        #IMAGE_TAG=$(git rev-parse --short HEAD)
        #IMAGE_REPO="holadmex/3-tier-web-architecture-frontend"
#        
        #docker build -t $IMAGE_REPO:$IMAGE_TAG -f Dockerfile .
        #docker push $IMAGE_REPO:$IMAGE_TAG
#
        #echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
#
    #- name: Deploy to EKS using Helm
      #run: |
        #helm upgrade --install frontend-release helm/frontend-chart \
          #--set image.repository="holadmex/3-tier-web-architecture-frontend" \
          #--set image.tag=${{ env.IMAGE_TAG }} \
          #--namespace dev --create-namespace




